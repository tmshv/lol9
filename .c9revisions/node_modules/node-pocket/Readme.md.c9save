{"ts":1350485323325,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# node-pocket\n  `node-pocet` is an API wrapper for https://getpocket.com service.\n\n  This project designed by current api docs: http://getpocket.com/api/docs\n\n\n## Installation\n   \n```bash\nnpm install node-pocket\n```\n\n## Using\n   \n   For using this wrapper you need to create `Pocket` class instanse from main module, passing\n   to it valid username, password and *your api key*.\n   \n\n## Documentation\n\n   For detailed explanation of error codes see http://getpocket.com/api/docs/#response.\n\n   Any request, that return code 200 considered successfull.\n\n   Each of callback function accept 2 parameters:\n\n   1) Error code, null if no errors\n   2) Result - a json object\n\n   Before call any method, we create instance:\n\n```coffee-script\np = new (require \"node-pocket\").Pocket \"<USERNAME>\", \"<PASSWORD>\", \"<APIKEY>\"\n```\n\n   List of methods\n\n   - [auth](#auth)\n   - [signup](#signup)\n   - [add](#add)\n   - [stats](#stats)\n   - [apiInfo](#apiInfo)\n   - [get](#get)\n   - [new](#new)\n   - [read](#read)\n   - [updateTitle](#updateTitle)\n   - [updateTags](#updateTags)\n\n\n<a name='auth'>\n### auth(fn)   \n\n  Authenticate user with password\n\n```coffee-script\np.auth (err, ok) ->\n  if not err and ok\n     console.log \"auth successfull\"\n  else\n     console.log \"auth fail\"\n```\n\n<a name='signup'>\n### signup(new_username, password, fn)\n\n  Signup new user. This call will be successfull only for unique usernames.\n\n```coffee-script\np = new (require \"node-pocket\").Pocket null, null, \"<APIKEY>\"\np.signup \"uname\", \"password, \"<APIKEY>\", (err, ok) ->\n  if not err and ok\n     console.log \"new user created\"\n  else\n     console.log \"error creating new user\"\n```\n\n\n  *this method was designed according api docs, but not tested yet!*\n\n<a name='add'>\n### add(url, title, [ref_id], fn)\n    \n  Add new url to pocket, accept single page data, for batch adding use [send](#send) method.\n\n  Parameter ref_id must be set for twitter client, see more: http://getpocket.com/api/docs/#add_ref_id\n  \n```coffee-script\np.add \"http://getpocket.com/\", \"Pocket main page\", (err, ok) ->\n  if not err and ok\n     console.log \"page added\n  else\n     console.log \"page adding error\"\n```\n\n  Note, that title that accessible by api may not match with title, that visible on\n  page http://getpocket.com/a/queue/\n\n<a name='stats'>\n### stats(fn)\n\n  Get statistics by user.\n\n```coffee-script\np.stats, (err, statObj) ->\n  unless err\n     console.log \"user stats: #{JSON.stringify statObj, null, 2}\n  else\n     console.log \"error fetching stat\"\n```\n\n<a name='apiInfo'>\n### apiInfo(fn) \n\n  Get limits for application\n\n```coffee-script\np.apiInfo, (err, info) ->\n  unless err\n     console.log \"user stats: #{JSON.stringify info, null, 2}\n  else\n     console.log \"error fetching stat\"\n```\n\n  `info` is a dictionary with \"x-limit-...\" keys.\n\n<a name='get'>\n### get(options, fn) \n\n  `options` dictionary may contain fields:\n\n  - `state` {String} - state for fetched pages, may be \"read\", \"unread\" and empty for both read and unread\n  - `myAppOnly` {Boolean} - get results only if they were saved from application with same apikey, default `false`.\n  - `since` {Number} - get results only if they were saved or created after `since` timestamp (unix formatted)\n  - `count` {Number} - max number of results to fetch. By dedault all matched results will be returned, but if you ignore `count` parameter, *your application may be banned any time*.\n  - `page` {Number} - page number for getting results, starting from 1, default 1\n  - `tags` {Boolean} - include tags in result , default `true`\n\n```coffee-script\np.get {count:10}, (err, pages) ->\n  unless err\n    console.log \"Timestamp: #{pages.since}\"\n    for k,v of pages.list\n      console.log \"#{k}\\t[#{v.url}](#{v.title})\"\n      console.log \"read: #{if v.state is '1' then 'yes' else 'no'}\"\n      console.log \"tags: #{if v.tags? then v.tags else '{empty}'}\\n\"\n  else\n    console.log \"error fetching pages\"\n```\n\n<a name='new'> \n### new(data, fn)\n\n  Batch creation of new pages\n  \n  `data` is an array of objects:\n  \n  - `data[].url` {String} - page url\n  - `data[].title` {String} - page title\n  - `data[].ref_id` {String}  - ref_id, only for twitter clients, see http://getpocket.com/api/docs/#add_ref_id\n\n```coffee-script\ndata = [\n     {url: \"http://getpocket.com/\", title: \"Pocket main\"},\n     {url: \"http://duckduckgo.com/\", title: \"Go go duck!\"}\n     ]\np.new data, (err) ->\n  unless err\n    console.log \"pages added\"\n  else\n    console.log \"pages wasn't added\"\n```    \n\n<a name='read'> \n### read(data, fn)\n\n  Batch mark pages as read\n\n  `data` is an array of objects:\n  \n  - `data[].url` {String} - page url\n\n```coffee-script\np.read [{url: \"http://getpocket.com/\"}], (err) ->\n  unless err\n    console.log \"mark getpocket as read\"\"\n  else\n    console.log \"page wasn't marked as read\"\n```\n\n<a name='updateTitle'> \n### updateTitle(data, fn)\n\n  Batch updating titles for pages\n\n  `data` is an array of objects:\n  \n  - `data[].url` {String} - page url\n  - `data[].title` {String} - page title\n\n```coffee-script\ndata = [\n     {url: \"http://getpocket.com/\", title: \"My Pocket\"},\n     {url: \"http://duckduckgo.com/\", title: \"Search\"}\n     ]\np.updateTitle data, (err) ->\n  unless err\n    console.log \"pages updated\"\n  else\n    console.log \"pages wasn't updated\"\n```  \n\n\n<a name='updateTags'> \n### updateTags(data, fn)\n\n  Batch update tags for pages\n\n  `data` is an array of objects:\n  \n  - `data[].url` {String} - page url\n  - `data[].tags` {String}  - comma separated tags\n\n```coffee-script\ndata = [\n     {url: \"http://getpocket.com/\", tags: \"pocket,bookmarks\"},\n     {url: \"http://duckduckgo.com/\", tags: \"search-engine\"}\n     ]\np.updateTags data, (err) ->\n  unless err\n    console.log \"pages tags updated\"\n  else\n    console.log \"pages tags wasn't updated\"\n```\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Kirill Temnov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"]],"start1":0,"start2":0,"length1":0,"length2":6845}]],"length":6845}
